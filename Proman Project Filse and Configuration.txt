First add a batch file to the registry in windows to make the 
  batch file start whenever a new console is launched
The batch file contains a DOSKEY that runs the inject_pm.bat whenever cd is run
When inject_pm.exe is ran it calls inject.exe
inject.exe looks for a proman.cfg file and if found returns batch code to add
  a folder to PATH environmental variable; the folder contains the executables
  like backup, build, check, commit, docs, info, interpret, list, new, run, save, serve, and upload
When an executable is called it calls some functions that return the Proman struct,
  which contains all configuration information both globally and locally (the project config)


How to make the proj_type module have the structs/enums to hold all the data but
  at the same time be able to have different languages/project types with different default data???

Solving Multi-Binary Rust Apps:
  Problem:
    When running a command for a multi-binary Rust app it will need special args to determine
    which executable the command should be executed on.
  Solution A:
    -Make a LangHandler or maybe ProjHandler which contains more specialized methods to run
      commands for a speicific language or project type.
    -The handler would be determined based on the language and project type config string.
    -For a custom set of instructions that can be stored in a separate config file specify
      Custom for the project type OR maybe add a use_default_lang_cfg or default_lang_cfg
      variable that exists in the Local struct which contains the project details.

Config deserialization notes:
  Specific language/project types may require additional config variables that do not apply
  to others.  For exmaple Rust can be configured to use different versions using Rustup,
  some projects in Rust require features which are only available in NIghtly's and thus
  Rustup must be called to switch compiler versions/targets.  Maybe have a method that
  calls Rustup to find out the version and if it isn't the specified version run a command
  that changes it.

Config deserialization:
  Method 0:
    Just store the list of commands in the local project config.
      How would this work for custom commands?
      And how would additional custom variables be added, like the Target to use for Rust
    Use the format:  "command-name": "command string"  
    not sure whether to use quotes for command name.
  Method A:
    Method A1:
      Make a Configurable trait.  When reading the config file iterate through each line
        and when reach a [Section Name] set configurator: Box<Configurable> to store the
        struct relating to that section.  Could use a function that returns a trait object
        based on the name of the string passed into it.
    Method A2
      Instead of traits use a closure to determine what function to call.
    Method A Notes:
      Since the method needed to deserialize each part would be determined by the input,
      it is possible to make a Custom language where a method is called to look for a
      custom.<project-type>.cfg file and the Custom struct determines the basic commands
      to execute for the built-in commands.
  Method B:
    Create a RawConfig struct that contains a str slice of just that section of the config.
    Make a function that calls a deserialization function based on the section.
  Method C:
    Use toml or yaml.  Not sure how well they would be able to store/retrieve content
    that may use different structs.
  Method D:
    Create a deserialization function for each variable.  However this would be awkward
    when working with different languages and project types which may require additional
    variables; this approach would need a way to store custom variables.
  Method E:
    Create a language.cfg file that can be found in the install, user, and local dirs.
    Depending on what language is used deserialize it accordingly.

Add an Open command that opens files in your text editor, example load sublime text and open explorer to the proj directory and open notepad with the project notes


TODO:
figure out how VarStr's should reference arguments passed to the executable
    {{!flag:-f,false}} returns false if the flag is present
    {{flag:-t,--true}} returns true if the flag is present
    {{arg:-s,--store}} returns the next argument if flag is present
    {{arg:0}} is the command that was called
    {{arg:*}} is the command entire argument string
    maybe something like {{flag:-t,--table}} for an arg that is True if present, 
    or {{!flag:-t,--table}} for a flag that is stored as false is present.
    For a stored type maybe use {{arg:--layout}}
    If the value of arg is an int less than 256 use {{arg:3}} to specify the 3rd argument passed in
        the number is the 3rd positional argument, flags are removed
        all flags {{flag:-t,--table}} and {{arg:-t,--table}} are removed 
        then the correct positional argument is fetched
    Do not worry about types that parse into structs, conversation happens in called executable
Allow VarStr's to have custom vars parsed into them

multi binary executable

FUTURE:
    make it possible for StrVar's to contain conditional code, enabling testing a var for
        different values and returning different text.  Maybe something like:
        [[if@this=="something?"?this is the output]]


c:\
    ...\<proj>\
        .proman\
            templates\
            scripts\
            snippets\
            bin\
            
            .proman
            proman.cfg
            .env


    Windows: users\andrew\.proman\  AND c:\program files (should have similar contents, user folder contains custom templates and )
    Linux: ?????
        global.cfg
        bazaar.vcs.cfg // custom version control system
        .env
        templates\
            rust.binary\
            rust.binary.template
            rust.binary.setup.bat
            rust.library.template
            rust.library.setup.exe
            rust.library\
            ...
        scripts\
            ...
        docs\
            php-manuel.chm
            python.chm
            ...
        bin\
            save/commit // parses vars of the argument string according to 
			//   args passed to executable and config info
            new
            template
            docs|man
            help
            inject
            info
            inject\
                backup
                bench
                build
                check
                commit
                docs
                info
                interpret
                list
                new
                run
                save
                serve
                test
                template
                upload
                stub         // copies stub.exe as <command> when creating custom commands
        MAYBE:
        snippets\
            lang\
                lang.php.snip
                lang.rust.snip
            global.snippets.snip
            vcs\
                vcs.git.template
                git\
                    ...
                vcs.mercurial.template
                mecurial\
                    ...


Settings:
GLOBAL
install_dir
global_bin_dir
user_bin_dir
user_dir
templates
docs



LOCAL
path
local_bin_dir
vcs
vcs_default_inc: "major|minor|patch"
custom_vcs_commands: [{on: "<command>", when: "before|after", run: "bazaar.exe", args: "checkout HEAD {{arg:3}}"}]
lang
proj_type
custom_docs
custom_templates
junctions
sync_files
autoruns: [{on: "<command>", when: "before|after", run: "some.exe" args: "-a {{flag:-t,--thing}} -b {{arg:-b,--build}}"}]
	Separate flag/arg by : to get the flag/values then separate the values on , and do s.trim()
custom_commands: [{command: "<command>", run: ""}]




Env Vars:
proman-global = # defaults to user profile folder

Notes:
    -all project names can be exported into a "code.bat"-like file where the names can be called
        directly instead of specifying the entire directory, if enabled in the proman.cfg
    -write output of commands to stderr or stdin


###############################################
cmds.proman
###############################################
# sync means keep the destination file the same as the source file
# either by using defaut syncing or by using a custom command that
# is called whenever the destination is older than the source
sync <file-source> with <file-dest>   # if dest is older than source replace dest with a copy of source
sync <file-source> against|to| <file-dest> using <executable/script>  # if source is newer than dest run command
sync <file-source> using <executable/script>  # whenever a file is modified run a script 

# create custom commands for a proman project
command <cmd> uses <executable/script> -a {{var}} -b {{var}} -c {{var}}


###############################################
global-cmds.proman
###############################################
template project


###############################################
Environmental Variables:
###############################################
proman-global = C:\users\andrew\.proman\


###############################################
VARIABLES:
###############################################
projdir          # the path of the project
projdrive



# a json or human-readable json or xml serialized file that user can edit
###############################################
proman.cfg
###############################################
[settings]
vcs: git
language: rust
type: binary|library|custom-<template>

build: {
  release = [toml-inc.bat, , cargo build --release]
  debug = cargo build --debug
  ... = cargo build -- ...
}
run: {
  release = []
}
new: {
  autoruns = { before: [<file>.exe, <file>.bat], after: [<file.cmd] }
  templates = [ {
    name: <name>, 
    folder: <folder>, 
    type: <type>, 
    setup: {
      variables: [{name: <name>, var: <var>}]
      on-create: [{{$global}}\setup.exe, setup.bat]
    }
  } ]
}
sync: [
  {
    source: <folder>.
    destination: [<file>, <file>, <file>],
    use: <exe>,
  }
]
docs: [
  {name: php, lang: php, source: <file>}
]

junctions [ {on: source, to: dest} ]

custom-field


###############################################
global.cfg
###############################################
docs: [ {name: php, lang: php, source: php-manual.chm} ]
templates:


###############################################
.snip
###############################################



###############################################
.template
###############################################
uses: [template: ...]
on-create: [ command.exe -dest {{dest}}, setup.bat {{dest}} ]
ignore: [ *.git, *.bak ]

###############################################
.proman
###############################################
    # the .proman file holds a msgpack serialized data
    # that the user does NOT edit
lastsave = <datetime>  # date of the last save all
pro.man.created = <datetime>
pro.man.updated = <datetime>
.proman.created = <datetime>
.proman.updated = <datetime>
proj.created = <datetime>  # when the project was generated

synchronization 
[
  {file: <file>, 
    lastsync: <datetime>, 
    sourcedate: {
      modified: <datetime>, 
      created: <datetime>
    },
    destdate: {
      modified: <datetime>,
      created: <datetime>
    },
  }, {file: ... },
]









