First add a batch file to the registry in windows to make the 
  batch file start whenever a new console is launched
The batch file contains a DOSKEY that runs the inject_pm.bat whenever cd is run
When inject_pm.exe is ran it calls inject.exe
inject.exe looks for a proman.cfg file and if found returns batch code to add
  a folder to PATH environmental variable; the folder contains the executables
  like backup, build, check, commit, docs, info, interpret, list, new, run, save, serve, and upload
When an executable is called it calls some functions that return the Proman struct,
  which contains all configuration information both globally and locally (the project config)


How to make the proj_type module have the structs/enums to hold all the data but
  at the same time be able to have different languages/project types with different default data???

TODO:
figure out how VarStr's should reference arguments passed to the executable
    maybe something like {{flag:-t,--table}} for an arg that is True if present, 
    or {{!flag:-t,--table}} for a flag that is stored as false is present.
    For a stored type maybe use {{arg:--layout}}
    Do not worry about types that parse into structs, conversation happens in called executable
Allow VarStr's to have custom vars parsed into them


c:\
    ...\<proj>\
        .proman\
            templates\
            scripts\
            snippets\
            bin\
            
            .proman
            proman.cfg
            .env


    Windows: users\andrew\.proman\  AND c:\program files (should have similar contents, user folder contains custom templates and )
    Linux: ?????
        global.cfg
        global.cmds
        .env
        templates\
            rust.binary\
            rust.binary.template
            rust.binary.setup.bat
            rust.library.template
            rust.library.setup.exe
            rust.library\
            ...
        scripts\
            ...
        docs\
            php-manuel.chm
            python.chm
            ...
        bin\
            save/commit // parses vars of the argument string according to 
			//   args passed to executable and config info
            new
            template
            docs|man
            help
            inject
            info
            inject\
                save
                commit
                test
                check
                run
                upload
                list
                backup
                interpret

        MAYBE:
        snippets\
            lang\
                lang.php.snip
                lang.rust.snip
            global.snippets.snip
            vcs\
                vcs.git.template
                git\
                    ...
                vcs.mercurial.template
                mecurial\
                    ...

Env Vars:
proman-global = # defaults to user profile folder

Notes:
    -all project names can be exported into a "code.bat"-like file where the names can be called
        directly instead of specifying the entire directory, if enabled in the proman.cfg
    -write output of commands to stderr or stdin


###############################################
cmds.proman
###############################################
# sync means keep the destination file the same as the source file
# either by using defaut syncing or by using a custom command that
# is called whenever the destination is older than the source
sync <file-source> with <file-dest>   # if dest is older than source replace dest with a copy of source
sync <file-source> against|to| <file-dest> using <executable/script>  # if source is newer than dest run command
sync <file-source> using <executable/script>  # whenever a file is modified run a script 

# create custom commands for a proman project
command <cmd> uses <executable/script> -a {{var}} -b {{var}} -c {{var}}


###############################################
global-cmds.proman
###############################################
template project


###############################################
Environmental Variables:
###############################################
proman-global = C:\users\andrew\.proman\


###############################################
VARIABLES:
###############################################
projdir          # the path of the project
projdrive



# a json or human-readable json or xml serialized file that user can edit
###############################################
proman.cfg
###############################################
[settings]
vcs: git
language: rust
type: binary|library|custom-<template>

build: {
  release = [toml-inc.bat, , cargo build --release]
  debug = cargo build --debug
  ... = cargo build -- ...
}
run: {
  release = []
}
new: {
  autoruns = { before: [<file>.exe, <file>.bat], after: [<file.cmd] }
  templates = [ {
    name: <name>, 
    folder: <folder>, 
    type: <type>, 
    setup: {
      variables: [{name: <name>, var: <var>}]
      on-create: [{{$global}}\setup.exe, setup.bat]
    }
  } ]
}
sync: [
  {
    source: <folder>.
    destination: [<file>, <file>, <file>],
    use: <exe>,
  }
]
docs: [
  {name: php, lang: php, source: <file>}
]

junctions [ {on: source, to: dest} ]

custom-field


###############################################
global.cfg
###############################################
docs: [ {name: php, lang: php, source: php-manual.chm} ]
templates:


###############################################
.snip
###############################################



###############################################
.template
###############################################
uses: [template: ...]
on-create: [ command.exe -dest {{dest}}, setup.bat {{dest}} ]
ignore: [ *.git, *.bak ]

###############################################
.proman
###############################################
    # the .proman file holds a msgpack serialized data
    # that the user does NOT edit
lastsave = <datetime>  # date of the last save all
pro.man.created = <datetime>
pro.man.updated = <datetime>
.proman.created = <datetime>
.proman.updated = <datetime>
proj.created = <datetime>  # when the project was generated

synchronization 
[
  {file: <file>, 
    lastsync: <datetime>, 
    sourcedate: {
      modified: <datetime>, 
      created: <datetime>
    },
    destdate: {
      modified: <datetime>,
      created: <datetime>
    },
  }, {file: ... },
]









