/* http://locklessinc.com/articles/fast_hash/ */
/* check that every input bit changes every output bit half the time */
#define MAXPAIR 80
#define MAXLEN 100
static void avalanche(void)
{
	byte qa[MAXLEN+1], qb[MAXLEN+2], *a = &qa[0], *b = &qb[1];
	u64b c, d, i, j = 0, k, l, z;
	u64b e, f, g, h;
	u64b x, y;
	u64b hlen;

	printf("No more than %d trials should ever be needed \n",MAXPAIR/2);
	for (hlen = 0; hlen < MAXLEN; ++hlen)
	{
		z = 0;
		
		/* For each input byte, */
		for (i = 0; i < hlen; ++i)
		{
			/* for each input bit, */
			for (j = 0; j < 8; ++j)
			{
				e=f=g=h=x=y=~(u64b)0;

				/* check that every output bit is affected by that input bit */
				for (k = 0; k < MAXPAIR; k += 2)
				{
					/* keys have one bit different */
					for (l=0; l<hlen+1; ++l)
					{
						a[l] = b[l] = 0;
					}

					/* have a and b be two keys differing in only one bit */
					a[i] ^= (k<<j);
					a[i] ^= (k>>(8-j));
					c = hash(a, hlen);
					b[i] ^= ((k+1)<<j);
					b[i] ^= ((k+1)>>(8-j));
					d = hash(b, hlen);

					e &= c^d;
					f &= ~(c^d);
					g &= c;
					h &= ~c;
					x &= d;
					y &= ~d;
					
					if (!(e|f|g|h|x|y)) break;
				}
				if (k > z) z = k;
				if (k == MAXPAIR)
				{
					printf("Some bit didn't change: ");
					printf("%.8llx %.8llx %.8llx %.8llx %.8llx %.8llx  ", e,f,g,h,x,y);
					printf("i %lld j %lld len %lld\n",i,j,hlen);
				}
				if (z == MAXPAIR) goto done;
			}
		}
		
done:
		if (z < MAXPAIR)
		{
			printf("Mix success  %2lld bytes ",i);
			printf("required  %lld  trials\n",z/2);
		}
	}
	printf("\n");
}